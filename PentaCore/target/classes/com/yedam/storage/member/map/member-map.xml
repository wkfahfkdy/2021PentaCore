<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.storage.member.map.member-map">

<!--  
private String member_id;
private String member_pwd;
private String member_name;
private String member_addr;
private String member_tel;
private String member_email;
private String member_birth;
private String member_disable;
-->

<!-- 로그인 -->
<select id="loginCheck" parameterType="com.yedam.storage.member.vo.MemberVO" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_id = #{member_id} and member_pwd = #{member_pwd} and member_disable = 'N'
</select>
	
<!-- 아이디/비밀번호 찾기(이메일확인)  -->	
<select id="modalEmailCheck" parameterType="com.yedam.storage.member.vo.MemberVO" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_name = #{member_name} and member_email = #{member_email} and member_disable = 'N'
</select>


<!-- 회원가입 -->	
<insert id="memberInsert" parameterType="hashmap" >
		insert into member values(#{member_id},#{member_pwd},#{member_name},#{member_addr},#{member_tel},#{member_email},#{member_birth},'N')
</insert>	

	
<select id="emailCheck" parameterType="string" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_email = #{p}
</select>

<select id="telCheck" parameterType="string" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_tel = #{p}
	</select>
	
<select id="idCheck" parameterType="string" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_id = #{p}
</select>	

	
	
	<!--
	  
	<update id="userPwUpdate" parameterType="hashmap">
		update users set user_pw=#{user_Pw} where user_id=#{user_Id}
	</update>
	
	<update id="userEmailUpdate" parameterType="hashmap">
		update users set user_Email=#{user_Email} where user_Id=#{user_Id}
	</update>
	
	<update id="userPhoneUpdate" parameterType="hashmap">
		update users set user_Phone=#{user_Phone} where user_Id=#{user_Id}
	</update>
	
	<update id="userAddrUpdate" parameterType="hashmap">
		update users set user_Addr=#{user_Addr} where user_Id=#{user_Id}
	</update>
	
	
	<select id="userLoanList" parameterType="string" resultType="com.yd.lib.users.vo.UserLoanInfoVO">
		SELECT 	h.user_Id, u.user_Name, b.book_Isbn, 
				b.book_title, b.book_aut, b.book_location, b.book_Img,b.book_Pub, b.book_subject, 
				TO_CHAR(h.loan_date,'YYYY/MM/DD') loan_Date, 
        		TO_CHAR(h.return_duedate,'YYYY/MM/DD') return_Duedate, h.loan_Status 
				from users u join history h on (u.user_id = h.user_id)
				join book b on (b.book_num = h.book_num) 
				where u.user_id = #{user_Id}
				order by h.loan_status,
       			h.loan_date asc
	</select>
	
	<select id="loanBooksCount" parameterType="string" resultType="int">
		<![CDATA[ SELECT 	COUNT(*)
				from users u join history h on (u.user_id = h.user_id)
				join book b on (b.book_num = h.book_num) 
        		where u.user_id = #{user_Id}
       			and loan_status = '대출'
				]]>
	</select>
	
	<select id="overDueBooksCount" parameterType="string" resultType="int">
		<![CDATA[ SELECT 	COUNT(*)
				from users u join history h on (u.user_id = h.user_id)
				join book b on (b.book_num = h.book_num) 
        		where u.user_id = #{user_Id}
       			and h.return_duedate < sysdate
       			and loan_status = '대출'
				]]>
	</select>
	
	<select id="loanSuspensionDate" parameterType="string" resultType="string">
		<![CDATA[ SELECT TO_CHAR((sysdate + 
											(select max(return_delaydays) -1 from history where
											return_delaydays > 0 and user_id= #{user_Id})) , 'YYYY/MM/DD')  from dual
				]]>
	</select>
	
	
	
	
	<select id="userYeyakList" parameterType="string" resultType="com.yd.lib.users.vo.UserYeyakInfoVO">
		SELECT 	y.user_Id, u.user_Name, b.book_Title, b.book_Aut, b.book_Location, b.book_Img,b.book_Pub, b.book_subject,y.yeyak_Num,
       			TO_CHAR(y.yeyak_submit,'YYYY/MM/DD') yeyak_Submit, 
       			TO_CHAR(y.yeyak_start,'YYYY/MM/DD') yeyak_Start, 
      			TO_CHAR(y.yeyak_end,'YYYY/MM/DD') yeyak_End, 
      			y.yeyak_Processing
        		FROM yeyak y JOIN book b
				ON (y.book_num = b.book_num)
				JOIN users u
				ON (y.user_id = u.user_id)
       			where y.user_id = #{user_Id} and y.yeyak_Processing = '예약중' or  y.user_id = #{user_Id} and y.yeyak_Processing = '예약신청'
	</select>
	
	
	<delete id="yeyakCancel" parameterType="string">
		delete from yeyak where yeyak_Num=#{yeyak_Num} 
	</delete>
	
	
	<select id="userWishList" parameterType="string" resultType="com.yd.lib.users.vo.UserWishInfoVO">
		SELECT 	w.user_id ,u.user_Name, w.wish_title, w.wish_aut, w.wish_pub, w.wish_isbn, w.wish_pubdate, w.wish_date,
        		w.wish_processing, w.wish_bigo,w.wish_coment
       			FROM users u JOIN wish w
				ON (u.user_id = w.user_id)
        		where u.user_id = #{user_Id}
	</select>
	
	-->
</mapper>
