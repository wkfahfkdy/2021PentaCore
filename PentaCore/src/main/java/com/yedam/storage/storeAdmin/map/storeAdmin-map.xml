<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.storage.storeAdmin.map.StoreAdminMapper">


<!-- 
	private String use_num;
	private Date use_start;
	private Date use_end;
	private String info_num;
	private String store_code;
	private String offer_code;
	private String member_id;
 -->



<!-- ============================== 동영 ================================ -->
<!-- 스토리지 현황 페이지 SQL -->
<select id="StorageList" resultType="StoreAdminVO" parameterType="StoreAdminVO">
	SELECT B.STORAGE_CODE, B.INFO_NUM, S.STORAGE_NAME, A.OFFER_CODE,
		    CASE
		        WHEN B.INFO_USE = 'Y' THEN '사용중(' || TO_CHAR(A.USE_END) || ')까지'
		        WHEN B.INFO_USE = 'N' THEN '미사용'
		    END AS INFO_USE
	FROM STORAGE S,(SELECT * FROM USE_STORAGE WHERE STORE_CODE = #{store_code} ) A RIGHT OUTER JOIN (SELECT * FROM STORAGE_INFO WHERE STORE_CODE = #{store_code} ) B
	ON A.INFO_NUM = B.INFO_NUM
	WHERE B.STORAGE_CODE = S.STORAGE_CODE
	ORDER BY B.INFO_NUM ASC
</select>

<select id="StorageInfo" resultType="StoreAdminVO">
	SELECT STORAGE_NAME, STORAGE_CODE
	FROM STORAGE
</select>

<select id="selectStorageInfo" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT M.MEMBER_NAME , O.OFFER_PRODUCT, U.USE_START, U.USE_END, U.STORE_CODE
	FROM MEMBER M, OFFER O, USE_STORAGE U
	WHERE M.MEMBER_ID = U.MEMBER_ID
	AND O.OFFER_CODE = U.OFFER_CODE
	AND U.STORE_CODE = #{store_code}
	AND O.OFFER_CODE = #{offer_code}
	ORDER BY U.USE_NUM ASC
</select>

<!-- 현재 그 지점의 예약 되어있는 리스트 -->
<select id="offerInfoList"  parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT M.MEMBER_ID , O.OFFER_PRODUCT, nvl(O.OFFER_RENTAL, 'X')as offer_rental, O.STORAGE_CODE,U.USE_START, U.USE_END, U.STORE_CODE, O.OFFER_CODE
	FROM MEMBER M, OFFER O, USE_STORAGE U
	WHERE M.MEMBER_ID = U.MEMBER_ID
	AND O.OFFER_CODE = U.OFFER_CODE
	AND U.STORE_CODE = #{store_code}
	ORDER BY U.USE_NUM ASC
</select>

<select id="selectOfferInfo" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT M.MEMBER_ID , O.OFFER_PRODUCT, nvl(O.OFFER_RENTAL, 'X'), O.STORAGE_CODE,U.USE_START, U.USE_END, U.STORE_CODE, O.OFFER_CODE
	FROM MEMBER M, OFFER O, USE_STORAGE U
	WHERE M.MEMBER_ID = U.MEMBER_ID
	AND O.OFFER_CODE = U.OFFER_CODE
	AND U.STORE_CODE = #{store_code}
	AND O.STORAGE_CODE = #{storage_code}
	ORDER BY U.USE_NUM ASC
</select>

<select id="unUseStorageList" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT I.*,TO_CHAR(I.INFO_NUM || S.STORAGE_NAME) AS storage_name
	FROM STORAGE_INFO I, STORAGE S
	WHERE I.STORAGE_CODE = S.STORAGE_CODE
	AND I.INFO_USE = 'N'
	AND I.STORE_CODE = #{store_code}
	ORDER BY 1 ASC
</select>

<!-- ============================== 동영 ================================ -->

<!-- 최반야 : 지점 공지사항 페이지 -->
<select id="storeNoticeList" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT * 
	FROM notice
	WHERE store_code = #{store_code}
</select> 

<insert id="registNotice" parameterType="StoreAdminVO">
	INSERT INTO notice(notice_num, notice_title, notice_content, notice_date, store_code)
	VALUES(notice_seq.nextval, #{notice_title}, #{notice_content}, sysdate, #{store_code})
</insert>

<select id="storeNoticeSelect" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	SELECT * 
	FROM notice
	WHERE notice_num = #{notice_num}
</select>

<update id="storeNoticeEdit" parameterType="StoreAdminVO">
	UPDATE notice 
	SET notice_title = #{notice_title}, notice_content = #{notice_content}
	WHERE notice_num = #{notice_num}
</update>

<delete id="storeNoticeDelete" parameterType="StoreAdminVO">
	DELETE FROM notice
	WHERE notice_num = #{notice_num}
</delete>
 
 
 
<!-- 전형민 -->
<select id="usingStrorageList" resultType="StoreAdminVO" >

 
		Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end > sysdate)
		
		
</select>
 
<select id="expiredStrorageList" resultType="StoreAdminVO" >
		<![CDATA[ 
		Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end <= sysdate)
		]]>
</select>

<!-- 사용보류 -->
<!-- 
	<select id="usingStrorageListPaging" parameterType="StoreAdminVO"  resultType="StoreAdminVO">
		      
		      
			Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end > sysdate)
                
				        WHERE NUM BETWEEN #{firstCnt} AND #{lastCnt}		
						
	</select>
	
	
	<select id="expiredStrorageListPaging" parameterType="StoreAdminVO"  resultType="StoreAdminVO">
		      
		    <![CDATA[  
			Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end <= sysdate)
                
				        WHERE NUM BETWEEN #{firstCnt2} AND #{lastCnt2}		
			]]>
						
	</select>
	 -->
	
	 <select id ="storageUserDetail" parameterType="string" resultType="StoreAdminVO">
			SELECT a.member_id, a.member_name, a.member_tel, b.*, o.offer_product,o.offer_premium, o.offer_wash,
   				l.laundry_consign, l.laundry_collect
				FROM member a JOIN use_storage b
				ON (a.member_id = b.member_id)
				JOIN offer o
				ON (b.offer_code = o.offer_code) 
			    full outer join laundry l 
			    on l.offer_code = o.offer_code
				WHERE b.use_num = #{p}
	
	</select> 
	
	<insert id="insertReport" parameterType="StoreAdminVO">
	insert into CONDITION_LIST 
	values(#{condition_title},sysdate,cd_seq.nextval,#{use_num},#{condition_comment})  
	</insert>
	
	<!-- <update id="updateLaundry" parameterType="StoreAdminVO">
	update laundry set laundry_consign = #{laundry_consign} and laundry_collect = #{laundry_collect} where laundry_code=#{laundry_code}
	</update> -->
	
 <!--전형민 -->
 
 <!-- 최반야 - 1:1 문의 관리 -->
 <!-- 문의 내역 리스트 -->
 <select id="customerAskList" parameterType="StoreAdminVO" resultType="StoreAdminVO">
 	SELECT question_num, question_title, question_date
 	FROM question
 	WHERE store_code = #{store_code}
 	ORDER BY question_group DESC
 </select>
 <!-- 문의 상세 조회 -->
 <select id="customerAskSelect" parameterType="StoreAdminVO" resultType="StoreAdminVO">
 	SELECT * 
 	FROM question
 	WHERE question_group IN
 		(SELECT question_group
 		FROM question
 		WHERE question_num = #{question_num})
 	ORDER BY question_group DESC, question_parents ASC
 </select>
 <!-- 문의 답변 달기 -->
 <insert id="answerAsk" parameterType="StoreAdminVO">
 	insert into question(question_num, question_parents, question_content, store_code, 
 						member_id, question_date, question_group)
	values(question_seq.nextval, 2, #{question_content}, #{store_code}, 
		#{member_id}, sysdate, #{question_group})
 </insert>
 <!-- 최반야 - 1:1 문의 관리 끝 -->
 	


	
	
	


 
 
</mapper>



<!-- 
 로그인 
<select id="loginCheck" parameterType="com.yedam.storage.member.vo.MemberVO" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_id = #{member_id} and member_pwd = #{member_pwd} and member_disable = 'N'
</select>

회원가입	
<insert id="memberInsert" parameterType="hashmap" >
		insert into member values(#{member_id},#{member_pwd},#{member_name},#{member_addr},#{member_tel},#{member_email},#{member_birth},'N')
</insert>	

(멤버 수정)
<update id="memberPwUpdate" parameterType="hashmap">
		update member set member_pwd=#{member_pwd} where member_id=#{member_id}
</update>
-->
	
