<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.storage.storeAdmin.map.StoreAdminMapper">


<!-- 
	private String use_num;
	private Date use_start;
	private Date use_end;
	private String info_num;
	private String store_code;
	private String offer_code;
	private String member_id;
 -->


<select id="usingStrorageList" resultType="StoreAdminVO" >
		select u.*,m.member_name
		from use_storage u join member m on u.member_id = m.member_id
		where use_end > sysdate
</select>

<!-- 스토리지 현황 페이지 SQL -->
<select id="StorageList" resultType="StoreAdminVO" parameterType="StoreAdminVO">
	SELECT B.STORAGE_CODE, B.INFO_NUM, S.STORAGE_NAME, A.OFFER_CODE,
		    CASE
		        WHEN B.INFO_USE = 'Y' THEN '사용중(' || TO_CHAR(A.USE_END) || ')까지'
		        WHEN B.INFO_USE = 'N' THEN '미사용'
		    END AS INFO_USE
	FROM STORAGE S,(SELECT * FROM USE_STORAGE WHERE STORE_CODE = #{store_code} ) A RIGHT OUTER JOIN (SELECT * FROM STORAGE_INFO WHERE STORE_CODE = #{store_code} ) B
	ON A.INFO_NUM = B.INFO_NUM
	WHERE B.STORAGE_CODE = S.STORAGE_CODE
	ORDER BY B.INFO_NUM ASC
</select>

<select id="StorageInfo" resultType="StoreAdminVO">
	SELECT STORAGE_NAME, STORAGE_CODE
	FROM STORAGE
</select>
<!-- 지점 공지사항 페이지 -->

<select id="storeNoticeList" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	select * 
	from notice
	where store_code = #{store_code}
</select> 

<insert id="registNotice" parameterType="StoreAdminVO">
	insert into notice(notice_num, notice_title, notice_content, notice_date, store_code)
	values(notice_seq.nextval, #{notice_title}, #{notice_content}, sysdate, #{store_code})
</insert>

<select id="storeNoticeSelect" parameterType="StoreAdminVO" resultType="StoreAdminVO">
	select * 
	from notice
	where notice_num = #{notice_num}
</select>

<update id="storeNoticeEdit" parameterType="StoreAdminVO">
	update notice 
	set notice_title = #{notice_title}, notice_content = #{notice_content}
	where notice_num = #{notice_num}
</update>

<delete id="storeNoticeDelete" parameterType="StoreAdminVO">
	delete from notice
	where notice_num = #{notice_num}
</delete>
 
<select id="expiredStrorageList" resultType="StoreAdminVO" >
		<![CDATA[ 
		select u.*,m.member_name
		from use_storage u join member m on u.member_id = m.member_id
		where use_end <= sysdate
		]]>
</select>


	<select id="usingStrorageListPaging" parameterType="StoreAdminVO"  resultType="StoreAdminVO">
		      
		      
			Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end > sysdate)
                
				        WHERE NUM BETWEEN #{firstCnt} AND #{lastCnt}		
						
	</select>
	
	
	<select id="expiredStrorageListPaging" parameterType="StoreAdminVO"  resultType="StoreAdminVO">
		      
		    <![CDATA[  
			Select * from (

						select ROW_NUMBER() OVER (ORDER BY u.use_start asc ) AS NUM, u.* ,m.member_name			
						from use_storage u join member m on u.member_id = m.member_id
                		where use_end <= sysdate)
                
				        WHERE NUM BETWEEN #{firstCnt2} AND #{lastCnt2}		
			]]>
						
	</select>
	


	 <select id ="selectReview" parameterType="string" resultType="StoreAdminVO">
			SELECT 	r.review_num, r.review_title, r.review_content,

				'20'||TO_DATE(r.review_date,'YY-MM-DD') review_date ,
			    r.store_code, r.member_id, REPLACE(m.member_name, substr(m.member_name,2,1), '*') member_name ,
			    s.store_name
			    
				from review r join member m on (r.member_id = m.member_id)
				join store s on (r.store_code = s.store_code) 
       			WHERE review_num = #{p}
				order by r.review_num desc
	
	</select>
	
	
	


</mapper>



<!-- 
 로그인 
<select id="loginCheck" parameterType="com.yedam.storage.member.vo.MemberVO" resultType="com.yedam.storage.member.vo.MemberVO" >
		select * from member where member_id = #{member_id} and member_pwd = #{member_pwd} and member_disable = 'N'
</select>

회원가입	
<insert id="memberInsert" parameterType="hashmap" >
		insert into member values(#{member_id},#{member_pwd},#{member_name},#{member_addr},#{member_tel},#{member_email},#{member_birth},'N')
</insert>	

(멤버 수정)
<update id="memberPwUpdate" parameterType="hashmap">
		update member set member_pwd=#{member_pwd} where member_id=#{member_id}
</update>
-->
	
